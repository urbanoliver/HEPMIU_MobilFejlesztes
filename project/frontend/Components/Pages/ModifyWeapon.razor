@page "/modify-weapon/{Id:int}"
@using System.ComponentModel.DataAnnotations
@using WeaponMobileApp.BusinessModel
@using WeaponMobileApp.Services

@inject NavigationManager NavigationManager
@inject WeaponService WeaponService

<div class="container">
    <h1>Fegyver Módosítása</h1>

    @if (isLoading)
    {
        <p>Loading weapon details...</p>
    }
    else if (currentWeapon == null)
    {
        <p>Weapon not found.</p>
    }
    else
    {
        <EditForm Model="@currentWeapon" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="name">Név:</label>
                <InputText id="name" @bind-Value="currentWeapon.Name" class="form-control" />
                <ValidationMessage For="@(() => currentWeapon.Name)" />
            </div>

            <div class="form-group">
                <label for="manufacturer">Gyártó:</label>
                <InputText id="manufacturer" @bind-Value="currentWeapon.Manufacturer" class="form-control" />
                <ValidationMessage For="@(() => currentWeapon.Manufacturer)" />
            </div>

            <div class="form-group">
                <label for="price">Ár:</label>
                <InputNumber id="price" @bind-Value="currentWeapon.Price" class="form-control" />
                <ValidationMessage For="@(() => currentWeapon.Price)" />
            </div>

            <div class="form-group">
                <label for="quantity">Mennyiség:</label>
                <InputNumber id="quantity" @bind-Value="currentWeapon.Quantity" class="form-control" />
                <ValidationMessage For="@(() => currentWeapon.Quantity)" />
            </div>

            <button type="submit" class="btn btn-primary">Fegyver Mentése</button>
        </EditForm>
    }
</div>

<style>
    .container {
        font-family: Arial, sans-serif;
        max-width: 500px;
        margin: 0 auto;
        padding: 20px;
        background-color: black;
    }

    h1 {
        color: #ffd700;
        text-align: center;
        margin-bottom: 20px;
        font-size: 24px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
        color: #ffa500;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        font-size: 16px;
        border: 1px solid #333;
        border-radius: 4px;
        background-color: #1a1a1a;
        color: #fff;
    }

    .btn-primary {
        display: block;
        width: 100%;
        padding: 10px;
        background-color: #ffa500;
        color: black;
        border: none;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .btn-primary:hover {
        background-color: #ff8c00;
    }
</style>

@code {
    [Parameter]
    public int Id { get; set; }

    private UpdateWeaponDTO currentWeapon;
    private List<Weapon> weapons;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadWeaponDetails();
    }

    private async Task LoadWeaponDetails()
    {
        isLoading = true;
        try
        {
            var weapon = await WeaponService.GetWeaponByIdAsync(Id);
            if (weapon != null)
            {
                currentWeapon = new UpdateWeaponDTO
                {
                    Name = weapon.Name,
                    Manufacturer = weapon.Manufacturer,
                    Price = weapon.Price,
                    Quantity = weapon.Quantity
                };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading weapon details: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            weapons = await WeaponService.GetWeaponsAsync();
            await WeaponService.SaveWeaponAsync(currentWeapon, weapons, Id);
            Console.WriteLine($"Weapon with ID {Id} updated successfully.");
            NavigationManager.NavigateTo("/weapon-list");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving weapon: {ex.Message}");
        }
    }
}
